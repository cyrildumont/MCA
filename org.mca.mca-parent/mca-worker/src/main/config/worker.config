import net.jini.jeri.ssl.SslServerEndpoint;
import com.sun.jini.reggie.RegistrarPermission;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import org.mca.util.MCAUtils;
import net.jini.lookup.entry.Name;
import net.jini.core.entry.Entry;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.constraint.Integrity;
import javax.security.auth.login.LoginContext;
import com.sun.jini.outrigger.OutriggerPermission;
import com.sun.jini.outrigger.snaplogstore.LogStore;

com.sun.jini.reggie {
	initialUnicastDiscoveryPort = 4161;

	unicastDiscoveryHost = MCAUtils.getIP();
	
	multicastInterfaces = MCAUtils.getNetworkInterfaces();
	multicastAnnouncementInterval = 2000l;
		
	serverExporter = MCAUtils.getServiceExporter(RegistrarPermission.class);

	initialLookupAttributes = new Entry[]{new Name("MCAWorker Lookup")};
	initialMemberGroups = new String[]{"MCA","Workers"};
}

net.jini.discovery.LookupDiscovery{
	multicastInterfaces = MCAUtils.getNetworkInterfaces();
	multicastAnnouncementInterval = 5000l;
	//multicastRequestInterval = 3000l;
}

com.sun.jini.outrigger{
	loginContext = new LoginContext("org.mca.security.MCA");
	initialLookupLocators = new LookupLocator[]{new LookupLocator("jini://localhost:4161")};
	serverExporter = MCAUtils.getServiceExporter(OutriggerPermission.class);
	takeMultipleLimit = 10000;
	store = new LogStore(this);
	persistenceDirectory = System.getProperty("mca.home") + "/data/worker/" + MCAUtils.getIP();
}
